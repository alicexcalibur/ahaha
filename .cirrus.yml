env: # Environment variables to pass to all tasks
    CIRRUS_CLONE_DEPTH: 1 # No need to clone with the whole history
    CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone the aosp-builder repo

    # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
    # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
    rclone_config: "ENCRYPTED[8e089726d515481d29bb09bdea3abc095d35f727d4d092a37ea3e05b1447bc35b356e638734165b74187250c72e009b0]"
    tgbot_token: "ENCRYPTED[90ce356df7b93399aae81395a80e6cb8f91c1bad15d7db7067d9bbc47a88f585233e6a25f21941893bd0ba1496add232]"

task:
    name: bootleg # Project name
    #use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
    timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
    container:
      image: apon77/aosp:latest # It has built-in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
      cpu: 8 #8 or less cpu for dummy build, 8 cpu for the final build, 8cpu highest for free accounts. Don't try to use more than 8cpu as free user, you may get blocked by ci.
      memory: 24G # So that we can have ram when needed, 32G highest
    download_ccache_background_script: # To download ccache in background
      - ./download_ccache # Ccache download script
    sync_script: # To sync source
      - ./sync # Source sync script
    monitor_background_script: # To monitor ccache and machine status every minute, runs in background
      - ./monitor # Monitor script
    build_script: # Actual build script foreground
      - ./build # Build script to run
    upload_ccache_script: # Upload ccache to cloud foreground
      - ./upload_ccache # Ccache uploading script
